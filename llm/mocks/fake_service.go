// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/inference-gateway/google-calendar-agent/llm"
)

type FakeService struct {
	GetModelStub        func() string
	getModelMutex       sync.RWMutex
	getModelArgsForCall []struct {
	}
	getModelReturns struct {
		result1 string
	}
	getModelReturnsOnCall map[int]struct {
		result1 string
	}
	GetProviderStub        func() string
	getProviderMutex       sync.RWMutex
	getProviderArgsForCall []struct {
	}
	getProviderReturns struct {
		result1 string
	}
	getProviderReturnsOnCall map[int]struct {
		result1 string
	}
	IsEnabledStub        func() bool
	isEnabledMutex       sync.RWMutex
	isEnabledArgsForCall []struct {
	}
	isEnabledReturns struct {
		result1 bool
	}
	isEnabledReturnsOnCall map[int]struct {
		result1 bool
	}
	ProcessNaturalLanguageStub        func(context.Context, string) (*llm.ProcessingResult, error)
	processNaturalLanguageMutex       sync.RWMutex
	processNaturalLanguageArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	processNaturalLanguageReturns struct {
		result1 *llm.ProcessingResult
		result2 error
	}
	processNaturalLanguageReturnsOnCall map[int]struct {
		result1 *llm.ProcessingResult
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeService) GetModel() string {
	fake.getModelMutex.Lock()
	ret, specificReturn := fake.getModelReturnsOnCall[len(fake.getModelArgsForCall)]
	fake.getModelArgsForCall = append(fake.getModelArgsForCall, struct {
	}{})
	stub := fake.GetModelStub
	fakeReturns := fake.getModelReturns
	fake.recordInvocation("GetModel", []interface{}{})
	fake.getModelMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeService) GetModelCallCount() int {
	fake.getModelMutex.RLock()
	defer fake.getModelMutex.RUnlock()
	return len(fake.getModelArgsForCall)
}

func (fake *FakeService) GetModelCalls(stub func() string) {
	fake.getModelMutex.Lock()
	defer fake.getModelMutex.Unlock()
	fake.GetModelStub = stub
}

func (fake *FakeService) GetModelReturns(result1 string) {
	fake.getModelMutex.Lock()
	defer fake.getModelMutex.Unlock()
	fake.GetModelStub = nil
	fake.getModelReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeService) GetModelReturnsOnCall(i int, result1 string) {
	fake.getModelMutex.Lock()
	defer fake.getModelMutex.Unlock()
	fake.GetModelStub = nil
	if fake.getModelReturnsOnCall == nil {
		fake.getModelReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getModelReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeService) GetProvider() string {
	fake.getProviderMutex.Lock()
	ret, specificReturn := fake.getProviderReturnsOnCall[len(fake.getProviderArgsForCall)]
	fake.getProviderArgsForCall = append(fake.getProviderArgsForCall, struct {
	}{})
	stub := fake.GetProviderStub
	fakeReturns := fake.getProviderReturns
	fake.recordInvocation("GetProvider", []interface{}{})
	fake.getProviderMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeService) GetProviderCallCount() int {
	fake.getProviderMutex.RLock()
	defer fake.getProviderMutex.RUnlock()
	return len(fake.getProviderArgsForCall)
}

func (fake *FakeService) GetProviderCalls(stub func() string) {
	fake.getProviderMutex.Lock()
	defer fake.getProviderMutex.Unlock()
	fake.GetProviderStub = stub
}

func (fake *FakeService) GetProviderReturns(result1 string) {
	fake.getProviderMutex.Lock()
	defer fake.getProviderMutex.Unlock()
	fake.GetProviderStub = nil
	fake.getProviderReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeService) GetProviderReturnsOnCall(i int, result1 string) {
	fake.getProviderMutex.Lock()
	defer fake.getProviderMutex.Unlock()
	fake.GetProviderStub = nil
	if fake.getProviderReturnsOnCall == nil {
		fake.getProviderReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getProviderReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeService) IsEnabled() bool {
	fake.isEnabledMutex.Lock()
	ret, specificReturn := fake.isEnabledReturnsOnCall[len(fake.isEnabledArgsForCall)]
	fake.isEnabledArgsForCall = append(fake.isEnabledArgsForCall, struct {
	}{})
	stub := fake.IsEnabledStub
	fakeReturns := fake.isEnabledReturns
	fake.recordInvocation("IsEnabled", []interface{}{})
	fake.isEnabledMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeService) IsEnabledCallCount() int {
	fake.isEnabledMutex.RLock()
	defer fake.isEnabledMutex.RUnlock()
	return len(fake.isEnabledArgsForCall)
}

func (fake *FakeService) IsEnabledCalls(stub func() bool) {
	fake.isEnabledMutex.Lock()
	defer fake.isEnabledMutex.Unlock()
	fake.IsEnabledStub = stub
}

func (fake *FakeService) IsEnabledReturns(result1 bool) {
	fake.isEnabledMutex.Lock()
	defer fake.isEnabledMutex.Unlock()
	fake.IsEnabledStub = nil
	fake.isEnabledReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeService) IsEnabledReturnsOnCall(i int, result1 bool) {
	fake.isEnabledMutex.Lock()
	defer fake.isEnabledMutex.Unlock()
	fake.IsEnabledStub = nil
	if fake.isEnabledReturnsOnCall == nil {
		fake.isEnabledReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isEnabledReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeService) ProcessNaturalLanguage(arg1 context.Context, arg2 string) (*llm.ProcessingResult, error) {
	fake.processNaturalLanguageMutex.Lock()
	ret, specificReturn := fake.processNaturalLanguageReturnsOnCall[len(fake.processNaturalLanguageArgsForCall)]
	fake.processNaturalLanguageArgsForCall = append(fake.processNaturalLanguageArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ProcessNaturalLanguageStub
	fakeReturns := fake.processNaturalLanguageReturns
	fake.recordInvocation("ProcessNaturalLanguage", []interface{}{arg1, arg2})
	fake.processNaturalLanguageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeService) ProcessNaturalLanguageCallCount() int {
	fake.processNaturalLanguageMutex.RLock()
	defer fake.processNaturalLanguageMutex.RUnlock()
	return len(fake.processNaturalLanguageArgsForCall)
}

func (fake *FakeService) ProcessNaturalLanguageCalls(stub func(context.Context, string) (*llm.ProcessingResult, error)) {
	fake.processNaturalLanguageMutex.Lock()
	defer fake.processNaturalLanguageMutex.Unlock()
	fake.ProcessNaturalLanguageStub = stub
}

func (fake *FakeService) ProcessNaturalLanguageArgsForCall(i int) (context.Context, string) {
	fake.processNaturalLanguageMutex.RLock()
	defer fake.processNaturalLanguageMutex.RUnlock()
	argsForCall := fake.processNaturalLanguageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeService) ProcessNaturalLanguageReturns(result1 *llm.ProcessingResult, result2 error) {
	fake.processNaturalLanguageMutex.Lock()
	defer fake.processNaturalLanguageMutex.Unlock()
	fake.ProcessNaturalLanguageStub = nil
	fake.processNaturalLanguageReturns = struct {
		result1 *llm.ProcessingResult
		result2 error
	}{result1, result2}
}

func (fake *FakeService) ProcessNaturalLanguageReturnsOnCall(i int, result1 *llm.ProcessingResult, result2 error) {
	fake.processNaturalLanguageMutex.Lock()
	defer fake.processNaturalLanguageMutex.Unlock()
	fake.ProcessNaturalLanguageStub = nil
	if fake.processNaturalLanguageReturnsOnCall == nil {
		fake.processNaturalLanguageReturnsOnCall = make(map[int]struct {
			result1 *llm.ProcessingResult
			result2 error
		})
	}
	fake.processNaturalLanguageReturnsOnCall[i] = struct {
		result1 *llm.ProcessingResult
		result2 error
	}{result1, result2}
}

func (fake *FakeService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getModelMutex.RLock()
	defer fake.getModelMutex.RUnlock()
	fake.getProviderMutex.RLock()
	defer fake.getProviderMutex.RUnlock()
	fake.isEnabledMutex.RLock()
	defer fake.isEnabledMutex.RUnlock()
	fake.processNaturalLanguageMutex.RLock()
	defer fake.processNaturalLanguageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ llm.Service = new(FakeService)
