// Code generated by ADL CLI v0.21.7. DO NOT EDIT.
// This file was automatically generated from an ADL (Agent Definition Language) specification.
// Manual changes to this file may be overwritten during regeneration.

package main

import (
	"context"
	"log"
	"os"
	"os/signal"
	"syscall"

	server "github.com/inference-gateway/adk/server"
	envconfig "github.com/sethvargo/go-envconfig"
	zap "go.uber.org/zap"

	config "github.com/inference-gateway/google-calendar-agent/config"
	skills "github.com/inference-gateway/google-calendar-agent/skills"

	google "github.com/inference-gateway/google-calendar-agent/internal/google"
	logger "github.com/inference-gateway/google-calendar-agent/internal/logger"
)

var (
	Version          = "0.4.17"
	AgentName        = "google-calendar-agent"
	AgentDescription = "A Google Calendar A2A agent for AI assistants to interact with Google Calendar"
)

func main() {
	ctx := context.Background()

	var cfg config.Config
	if err := envconfig.Process(ctx, &cfg); err != nil {
		log.Fatal("failed to load config:", err)
	}

	// Initialize logger
	l, err := logger.NewLogger(ctx, &cfg)
	if err != nil {
		log.Fatal("failed to initialize logger:", err)
	}

	l.Info("starting " + AgentName + " agent (version: " + Version + ", environment: " + cfg.Environment + ")")

	toolBox := server.NewDefaultToolBox()

	// Initialize services
	googleSvc, err := google.NewServiceFactory(l, &cfg)
	if err != nil {
		l.Fatal("failed to initialize google service", zap.Error(err))
	}

	// Register list_calendar_events skill
	listCalendarEventsSkill := skills.NewListCalendarEventsSkill(l, googleSvc)
	toolBox.AddTool(listCalendarEventsSkill)
	l.Info("registered skill: list_calendar_events (List upcoming events from Google Calendar)")

	// Register create_calendar_event skill
	createCalendarEventSkill := skills.NewCreateCalendarEventSkill(l, googleSvc)
	toolBox.AddTool(createCalendarEventSkill)
	l.Info("registered skill: create_calendar_event (Create a new event in Google Calendar)")

	// Register update_calendar_event skill
	updateCalendarEventSkill := skills.NewUpdateCalendarEventSkill(l, googleSvc)
	toolBox.AddTool(updateCalendarEventSkill)
	l.Info("registered skill: update_calendar_event (Update an existing event in Google Calendar)")

	// Register delete_calendar_event skill
	deleteCalendarEventSkill := skills.NewDeleteCalendarEventSkill(l, googleSvc)
	toolBox.AddTool(deleteCalendarEventSkill)
	l.Info("registered skill: delete_calendar_event (Delete an event from Google Calendar)")

	// Register get_calendar_event skill
	getCalendarEventSkill := skills.NewGetCalendarEventSkill(l, googleSvc)
	toolBox.AddTool(getCalendarEventSkill)
	l.Info("registered skill: get_calendar_event (Get details of a specific event from Google Calendar)")

	// Register find_available_time skill
	findAvailableTimeSkill := skills.NewFindAvailableTimeSkill(l, googleSvc)
	toolBox.AddTool(findAvailableTimeSkill)
	l.Info("registered skill: find_available_time (Find available time slots in the calendar)")

	// Register check_conflicts skill
	checkConflictsSkill := skills.NewCheckConflictsSkill(l, googleSvc)
	toolBox.AddTool(checkConflictsSkill)
	l.Info("registered skill: check_conflicts (Check for scheduling conflicts in the specified time range)")

	llmClient, err := server.NewOpenAICompatibleLLMClient(&cfg.A2A.AgentConfig, l)
	if err != nil {
		l.Fatal("failed to create LLM client", zap.Error(err))
	}

	agent, err := server.NewAgentBuilder(l).
		WithConfig(&cfg.A2A.AgentConfig).
		WithLLMClient(llmClient).
		WithToolBox(toolBox).
		WithMaxChatCompletion(cfg.A2A.AgentConfig.MaxChatCompletionIterations).
		WithSystemPrompt(`You are a Google Calendar AI agent specialized in calendar management and scheduling operations.

Your primary capabilities:
1. **Event Management**: Create, update, delete, and retrieve calendar events
2. **Scheduling Intelligence**: Find available time slots and check for conflicts
3. **Calendar Operations**: List events with flexible time ranges and search queries

Key features:
- Support for both mock mode (demo/testing) and production Google Calendar API
- RFC3339 timestamp handling for accurate scheduling
- Intelligent conflict detection and availability checking
- Attendee management and location tracking
- Comprehensive event search and filtering

When helping users:
- Always validate time formats and ranges
- Provide clear feedback on scheduling conflicts
- Suggest alternative time slots when conflicts are detected
- Handle both simple and complex scheduling scenarios
- Maintain data accuracy and consistency with Google Calendar

Your responses should be accurate, helpful, and focused on calendar management tasks.
`).
		Build()
	if err != nil {
		l.Fatal("failed to create agent", zap.Error(err))
	}

	a2aServer, err := server.NewA2AServerBuilder(cfg.A2A, l).
		WithAgent(agent).
		WithAgentCardFromFile(".well-known/agent-card.json", map[string]any{
			"name":        AgentName,
			"version":     Version,
			"description": AgentDescription,
			"url":         cfg.A2A.AgentURL,
		}).
		WithDefaultBackgroundTaskHandler().
		WithDefaultStreamingTaskHandler().
		Build()
	if err != nil {
		l.Fatal("failed to create A2A server", zap.Error(err))
	}

	go func() {
		l.Info("starting A2A server", zap.String("port", cfg.A2A.ServerConfig.Port))
		if err := a2aServer.Start(ctx); err != nil {
			l.Fatal("server failed to start", zap.Error(err))
		}
	}()

	l.Info("google-calendar-agent agent running successfully",
		zap.String("port", cfg.A2A.ServerConfig.Port),
		zap.String("environment", cfg.Environment))

	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	l.Info("shutdown signal received, gracefully stopping server...")
	a2aServer.Stop(ctx)
	l.Info("google-calendar-agent agent stopped")
}
